from typing import Any, Dict, List, Union

import orjson

from haystack import Pipeline, component
from haystack.evaluation.eval_utils import (
    convert_component_outputs_from_dict,
    convert_component_outputs_to_dict,
    convert_pipeline_outputs_from_dict,
    convert_pipeline_outputs_to_dict,
)


class EvaluationResult:
    """
    EvaluationResult keeps track of all the information related to evaluation, namely the runnable (Pipeline or component), inputs, outputs, and expected outputs.
    The EvaluationResult keeps track of all the information stored by eval.

    :param runnable: The runnable (Pipeline or component) used for evaluation.
    :param inputs: List of inputs used for evaluation.
    :param outputs: List of outputs generated by the runnable.
    :param expected_outputs: List of expected outputs used for evaluation.
    """

    def __init__(
        self,
        runnable: Union[Pipeline, component],
        inputs: List[Dict[str, Any]],
        outputs: List[Dict[str, Any]],
        expected_outputs: List[Dict[str, Any]],
    ) -> None:
        self.runnable = runnable
        self.inputs = inputs
        self.outputs = outputs
        self.expected_outputs = expected_outputs

    def serialize(self) -> bytes:
        """
        Serializes the contents of EvaluationResult, to bytes using orjson:
        - runnable
        - inputs
        - outputs
        - expected outputs

        The method uses theconvert_objects_to_dict() method to convert the outputs and expected_outputs to serialized data from dataclasses.

        :return bytes: The seriaized data in JSON.
        """
        type_runnable = "Pipeline" if isinstance(self.runnable, Pipeline) else "component"
        if type_runnable == "Pipeline":
            runnable_type_dict = ("Pipeline", self.runnable.dumps())
            outputs_dict = convert_pipeline_outputs_to_dict(self.outputs)
            expected_outputs_dict = convert_pipeline_outputs_to_dict(self.expected_outputs)

        else:
            runnable_type_dict = ("Component", self.runnable.to_dict())
            outputs_dict = convert_component_outputs_to_dict(self.outputs)
            expected_outputs_dict = convert_component_outputs_to_dict(self.expected_outputs)

        final_dict = {
            "runnable": runnable_type_dict,
            "inputs": self.inputs,
            "outputs": outputs_dict,
            "expected_outputs": expected_outputs_dict,
        }

        serialized_data = orjson.dumps(final_dict)

        return serialized_data

    @classmethod
    def deserialize(cls, data: bytes) -> "EvaluationResult":
        """
        Deserializes the contents of EvaluationResult from JSON using orjson.

        The method uses the convert_dict_to_objects() method to convert the serialized outputs and expected_outputs to deserialized dataclasses.

        :param data: Data to be deserialized.
        :return: An instance of EvaluationResult representing the original object.
        """
        deserialized_data = orjson.loads(data)

        runnable_type, runnable_dict = deserialized_data["runnable"]
        if runnable_type == "Pipeline":
            runnable = Pipeline.loads(runnable_dict)
            outputs = convert_pipeline_outputs_from_dict(data=deserialized_data["outputs"])
            expected_outputs = convert_pipeline_outputs_from_dict(data=deserialized_data["expected_outputs"])
        else:
            runnable = runnable_type.from_dict()
            outputs = convert_component_outputs_from_dict(data=deserialized_data["outputs"])
            expected_outputs = convert_component_outputs_from_dict(data=deserialized_data["expected_outputs"])
        inputs = deserialized_data["inputs"]

        return cls(runnable, inputs, outputs, expected_outputs)


def eval(
    runnable: Union[Pipeline, component], inputs: List[Dict[str, Any]], expected_outputs: List[Dict[str, Any]]
) -> EvaluationResult:
    """
    Evaluates the provided Pipeline or component based on the given inputs and expected outputs.

    This function facilitates the evaluation of a given runnable (either a Pipeline or a component) using the provided
    inputs and corresponding expected outputs.

    :param runnable: The runnable (Pipeline or component) used for evaluation.
    :param inputs: List of inputs used for evaluation.
    :param expected_outputs: List of expected outputs used for evaluation.

    :return: An instance of EvaluationResult containing information about the evaluation, including the runnable, inputs, outputs, and expected outputs.
    """

    outputs = []

    # Check that expected outputs has the correct shape
    if len(inputs) != len(expected_outputs):
        raise ValueError("Length of expected_outputs does not match length of inputs.")

    for input_ in inputs:
        output = runnable.run(input_)
        outputs.append(output)

    return EvaluationResult(runnable, inputs, outputs, expected_outputs)
